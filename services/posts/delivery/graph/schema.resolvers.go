package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"ozon-test/services/posts/delivery/graph/model"
)

// MutationCreatePost is the resolver for the mutationCreatePost field.
func (r *mutationResolver) MutationCreatePost(ctx context.Context, content string, allowComments bool) (*model.Post, error) {
	return r.CreatePost(ctx, content, allowComments)
}

// MutationCreateComment is the resolver for the mutationCreateComment field.
func (r *mutationResolver) MutationCreateComment(ctx context.Context, postID string, content string, parentID *string) (*model.Comment, error) {
	return r.CreateComment(ctx, postID, content, parentID)
}

// QueryPosts is the resolver for the queryPosts field.
func (r *queryResolver) QueryPosts(ctx context.Context, limit *int, offset *int) ([]*model.Post, error) {
	return r.GetPosts(ctx, limit, offset)
}

// QueryPost is the resolver for the queryPost field.
func (r *queryResolver) QueryPost(ctx context.Context, id string, limit *int, offset *int) (*model.Post, error) {
	return r.GetPost(ctx, id, limit, offset)
}

// QueryCommentsByPostID is the resolver for the queryCommentsByPostId field.
func (r *queryResolver) QueryCommentsByPostID(ctx context.Context, postID string, limit *int, offset *int) ([]*model.Comment, error) {
	return r.GetCommentsByPostID(ctx, postID, limit, offset)
}

// QueryCommentsByCommentID is the resolver for the queryCommentsByCommentId field.
func (r *queryResolver) QueryCommentsByCommentID(ctx context.Context, commentID string, limit *int, offset *int) ([]*model.Comment, error) {
	return r.GetCommentsByCommentID(ctx, commentID, limit, offset)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
