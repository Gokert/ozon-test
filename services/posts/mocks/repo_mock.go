// Code generated by MockGen. DO NOT EDIT.
// Source: posts_repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "ozon-test/services/posts/delivery/graph/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPostsRepository is a mock of IPostsRepository interface.
type MockIPostsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPostsRepositoryMockRecorder
}

// MockIPostsRepositoryMockRecorder is the mock recorder for MockIPostsRepository.
type MockIPostsRepositoryMockRecorder struct {
	mock *MockIPostsRepository
}

// NewMockIPostsRepository creates a new mock instance.
func NewMockIPostsRepository(ctrl *gomock.Controller) *MockIPostsRepository {
	mock := &MockIPostsRepository{ctrl: ctrl}
	mock.recorder = &MockIPostsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPostsRepository) EXPECT() *MockIPostsRepositoryMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockIPostsRepository) CreateComment(comment *model.Comment) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", comment)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockIPostsRepositoryMockRecorder) CreateComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockIPostsRepository)(nil).CreateComment), comment)
}

// CreatePost mocks base method.
func (m *MockIPostsRepository) CreatePost(post *model.Post) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", post)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockIPostsRepositoryMockRecorder) CreatePost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockIPostsRepository)(nil).CreatePost), post)
}

// GetCommentsByPostId mocks base method.
func (m *MockIPostsRepository) GetCommentsByPostId(id uint64, limit, offset *int) ([]*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByPostId", id, limit, offset)
	ret0, _ := ret[0].([]*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByPostId indicates an expected call of GetCommentsByPostId.
func (mr *MockIPostsRepositoryMockRecorder) GetCommentsByPostId(id, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByPostId", reflect.TypeOf((*MockIPostsRepository)(nil).GetCommentsByPostId), id, limit, offset)
}

// GetCommentsCommentID mocks base method.
func (m *MockIPostsRepository) GetCommentsCommentID(id uint64, limit, offset *int) ([]*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsCommentID", id, limit, offset)
	ret0, _ := ret[0].([]*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsCommentID indicates an expected call of GetCommentsCommentID.
func (mr *MockIPostsRepositoryMockRecorder) GetCommentsCommentID(id, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsCommentID", reflect.TypeOf((*MockIPostsRepository)(nil).GetCommentsCommentID), id, limit, offset)
}

// GetPost mocks base method.
func (m *MockIPostsRepository) GetPost(id uint64, limit, offset *int) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", id, limit, offset)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockIPostsRepositoryMockRecorder) GetPost(id, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockIPostsRepository)(nil).GetPost), id, limit, offset)
}

// GetPosts mocks base method.
func (m *MockIPostsRepository) GetPosts(limit, offset *int) ([]*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", limit, offset)
	ret0, _ := ret[0].([]*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockIPostsRepositoryMockRecorder) GetPosts(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockIPostsRepository)(nil).GetPosts), limit, offset)
}
